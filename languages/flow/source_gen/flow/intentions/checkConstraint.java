package flow.intentions;

/*Generated by MPS */

import jetbrains.mps.editor.intentions.IntentionsFactory;
import jetbrains.mps.editor.intentions.NodeTransformer;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import flow.behavior.StructureChecker;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.ide.modelchecker.platform.actions.ModelCheckerIssue;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.util.Pair;
import jetbrains.mps.ide.findusages.model.CategoryKind;
import javax.swing.JScrollPane;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.ArrayList;
import jetbrains.mps.editor.intentions.BaseNodeTransformer;

public class checkConstraint extends IntentionsFactory {
  public checkConstraint() {
  }

  public String getId() {
    return getClass().getName();
  }

  public boolean isAvailableInChildren() {
    return true;
  }

  public boolean isSurroundWith() {
    return false;
  }

  public NodeTransformer.Kind getKind() {
    return NodeTransformer.Kind.INTENTION;
  }


  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x3ac25d6afd494a5bL, 0x9c1ca6236d977d96L, 0x2068c047bc1763abL, "flow.structure.ChildConcept");
  }

  public SNodePointer getDeclarationNode() {
    return implementationNode;
  }

  private SNodePointer implementationNode = new SNodePointer("r:768f2cf4-8ab7-423a-bc3a-bcc167427273(flow.intentions)", "2335327821122469981");


  private boolean isApplicableHelper(SNode node, EditorContext editorContext) {
    return true;
  }


  public boolean isAvailableInChild(SNode node, SNode node1, EditorContext context) {
    return true;
  }

  public boolean isApplicable(SNode node, EditorContext editorContext) {
    return isApplicableHelper(node, editorContext);
  }


  public void execute(SNode node, EditorContext editorContext) {


    Object[][] object = new Object[][]{};
    int rowCount = 0;

    JFrame frame = new JFrame("Dashboard");

    JPanel panel = new JPanel();
    panel.setLayout(new BorderLayout());

    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    model.addColumn("Concept Name");
    model.addColumn("Node ID");
    model.addColumn("Error Type");
    model.addColumn("Message");

    StructureChecker checker = new StructureChecker();

    List<SearchResult<ModelCheckerIssue>> checkModelList = checker.checkModel(SNodeOperations.getModel(node), null);

    for (SearchResult<ModelCheckerIssue> item : ListSequence.fromList(checkModelList)) {

      String errorSeverity = "";
      String issueType = "";

      List<Pair<CategoryKind, String>> categories = item.getCategories();

      for (Pair<CategoryKind, String> section : ListSequence.fromList(categories)) {

        if (errorSeverity.equals("")) {
          errorSeverity = section.o2;

        } else {
          issueType = section.o2;
        }
      }

      jetbrains.mps.smodel.SNode nodeError = as_8dozgi_a0a8a22a62(item.getPathObject(), jetbrains.mps.smodel.SNode.class);
      model.addRow(new Object[]{nodeError.getPresentation(), nodeError.getNodeId(), issueType, item.getObject().getMessage()});

    }
    JScrollPane scrollPane = new JScrollPane(table);

    panel.add(scrollPane, BorderLayout.CENTER);

    frame.getContentPane().add(panel);

    frame.pack();
    frame.setVisible(true);

  }
  public String description(SNode node, EditorContext editorContext) {
    return "check constraint";
  }

  public Collection<NodeTransformer> getTreeTransformers(SNode node, SNode child, EditorContext editorContext) {
    Collection<NodeTransformer> result = CollectionSequence.fromCollection(new ArrayList<NodeTransformer>());
    CollectionSequence.fromCollection(result).addElement(new BaseNodeTransformer(this, node, editorContext, checkConstraint.this.getKind(), implementationNode) {
      protected void execute(SNode node, EditorContext editorContext) {
        checkConstraint.this.execute(node, editorContext);
      }
      protected String getDescription(SNode node, EditorContext editorContext) {
        return checkConstraint.this.description(node, editorContext);
      }
    });
    return result;
  }
  private static <T> T as_8dozgi_a0a8a22a62(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
