package flow.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.editor.menus.GroupMenuPart;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Arrays;
import jetbrains.mps.lang.editor.menus.SingleItemMenuPart;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.menus.transformation.ActionItemBase;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class ChildConcept_TransformationMenu extends TransformationMenuBase {
  private final Set<String> myLocations = SetSequence.fromSetAndArray(new HashSet<String>(), MenuLocations.CONTEXT_ASSISTANT);
  @Override
  public boolean isApplicableToLocation(@NotNull String location) {
    return SetSequence.fromSet(myLocations).contains(location);
  }

  @Override
  @NotNull
  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {
    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.CONTEXT_ASSISTANT).contains(_context.getMenuLocation())) {
      result.add(new ChildConcept_TransformationMenu.TransformationMenuPart_Group_ny8kal_a0());
    }
    return result;
  }

  public class TransformationMenuPart_Group_ny8kal_a0 extends GroupMenuPart<TransformationMenuItem, TransformationMenuContext> {
    private int size;
    @Override
    protected void initialize(TransformationMenuContext _context) {
      super.initialize(_context);
      size = new Computable<Integer>() {
        public Integer compute() {
          return ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0x3ac25d6afd494a5bL, 0x9c1ca6236d977d96L, 0x2068c047bc17596eL, "flow.structure.RootConcept"), false, false), MetaAdapterFactory.getContainmentLink(0x3ac25d6afd494a5bL, 0x9c1ca6236d977d96L, 0x2068c047bc17596eL, 0x2068c047bc1763eaL, "two"))).count();

        }
      }.compute();
    }

    @Override
    protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts() {
      return Arrays.<MenuPart<TransformationMenuItem, TransformationMenuContext>>asList(new ChildConcept_TransformationMenu.TransformationMenuPart_Group_ny8kal_a0.TransformationMenuPart_Action_ny8kal_a0a());
    }
    private class TransformationMenuPart_Action_ny8kal_a0a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new ChildConcept_TransformationMenu.TransformationMenuPart_Group_ny8kal_a0.TransformationMenuPart_Action_ny8kal_a0a.Item(context);
      }

      private class Item extends ActionItemBase {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          if (size < 2) {
            return "Add More TWO ";

          }


          return "you may add more nodes now.. However... this will make the model inconsistent";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeOperations.insertNextSiblingChild(_context.getNode(), SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3ac25d6afd494a5bL, 0x9c1ca6236d977d96L, 0x2068c047bc1763abL, "flow.structure.ChildConcept")), null));

        }


      }
    }
  }
}
